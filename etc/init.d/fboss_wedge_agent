#! /bin/sh
### BEGIN INIT INFO
# Provides:          fboss_wedge_agent
# Required-Start:    $syslog onl-platform-baseconf
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Facebook FBOSS wedge daemon
### END INIT INFO

# Author: Rob Sherwood <rob.sherwood@bigswitch.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=" Facebook FBOSS agent"
NAME=fboss_wedge_agent
DAEMON=/usr/local/bin/$NAME
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
MGMT_IF="-mgmt_if=ma1"
COLD_BOOT="-can_warm_boot=false"
OCP_DEMO="-config=/etc/fboss/ocp-demo.json"
SAMPLE1="-config=/etc/fboss/sample1.json"
SAMPLE2="-config=/etc/fboss/sample2.json"
SAMPLE3="-config=/etc/fboss/sample3.json"
FBOSS_DAEMON_OPTIONS="$MGMT_IF $OCP_DEMO $COLD_BOOT"
# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Always be verbose loading this daemon
VERBOSE=1

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

PLAT_FILE=/etc/onl/platform
PLATFORM=`cat $PLAT_FILE`
if [ -z $PLATFORM ] ; then
    log_failure_msg "Failed: no platform in $PLAT_FILE"
    exit 0
elif [ $PLATFORM != x86-64-accton-wedge-16x-r0 ] ; then
    log_failure_msg "Failed: FBOSS not supported for platform $PLATFORM"
    exit 0
fi

KERNEL_MODS=/lib/modules/`uname -r`/
MODS="linux-kernel-bde linux-user-bde linux-bcm-knet"

#
# Function that starts the daemon/service
#
do_start()
{
    if [ ! -d $KERNEL_MODS ] ; then
        echo "Error: OpenNSL kernel modules not found in $KERNEL_MODS "
        exit 0
    fi
    if [ ! -f /usr/local/lib/libopennsl.so.1 ] ; then
        echo "\nError: OpenNSL library not found, attempting to grab from GitHub"
        /etc/init.d/OpenNSL_download
    fi
    if [ ! -f /usr/local/lib/libopennsl.so.1 ] ; then
        echo "Error: Unable to download module, please check that the management ethernet interface (ma1) is up and has internet connectivity then run /etc/init.d/OpenNSL_download"
        exit 0
    fi
    log_progress_msg "    --- Loading "
    log_progress_msg " linux-kernel-bde "
    insmod $KERNEL_MODS/linux-kernel-bde.ko maxpayload=128 dmasize=64M
    for mod in $MODS; do
      echo $mod | grep -q kernel && continue
      log_progress_msg " $mod "
      insmod $KERNEL_MODS/$mod.ko
    done
    # Create dev nodes
    log_progress_msg "; Creating devices "
    [ -e /dev/linux-kernel-bde ] || mknod /dev/linux-kernel-bde c 127 0
    [ -e /dev/linux-user-bde ] || mknod /dev/linux-user-bde c 126 0
    [ -e /dev/linux-bcm-knet ] || mknod /dev/linux-bcm-knet c 122 0
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        start-stop-daemon --start --make-pidfile --quiet --pidfile $PIDFILE \
          --background --exec $DAEMON -- $FBOSS_DAEMON_OPTIONS > /dev/null \
          || return 1
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile \
      $PIDFILE --exec $DAEMON
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    # if you remove the modules too quickly, the kernel will crash
    sleep 2
    for mod in $MODS; do
      echo $mod | grep -q kernel && continue
      log_progress_msg " $mod "
      rmmod $mod
    done
    log_progress_msg " linux-kernel-bde "
    rmmod linux-kernel-bde

    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
        #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE \
        --name $NAME
    return 0
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    #reload|force-reload)
        #
        # If do_reload() is not implemented then leave this commented out
        # and leave 'force-reload' as an alias for 'restart'.
        #
        #log_daemon_msg "Reloading $DESC" "$NAME"
        #do_reload
        #log_end_msg $?
        #;;
    restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

:
